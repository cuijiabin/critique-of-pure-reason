第5章使用ZooKeeper

好了，到现在为止，在学习了前面几章的内容后，相信你对ZooKeeper已经有了一个基本的认识了，那么，还等什么，让我们开始ZooKeeper之旅吧。
5.1部署与运行
本节将着重介绍如何部署一个ZooKeeper集群，以及如何将其顺利地运行起来。注意，截止作者完成本章写作的时候，ZooKeeper的官方最新稳定版本是3.4.3，因此本章的讲解都是针对这个版本进行的。尽管如此，由于ZooKceper各个版本之间在部署和运行方式上的变化不大。因此本章的很多内容都适用于ZooKeeper的其他版本。
5.1.1系统环境
对于大部分Java开源产品而言，在部署与运行之前，总是需要搭建一个合适的环境。通常包括操作系统和Java环境两方面。本节将介绍部署与运行ZooKeeper需要的系统环境，同样包括操作系统和Java环境两部分。
操作系统
首先，你需要选择一个合适的操作系统。幸运的是，ZooKeeper对于不同平台的支持都很好，在现在绝大多数主流的操作系统上都能够正常运行，例如GNU/Linux.SunSolaris.
Win32以及MacOSX等。需要注意的是，ZooKeeper官方文档中特别强调，由于FreeBSD系统的JVM对lava的NIOSelector支持得不是很好，所以不建议在该系统上部署生产环境的ZooKeeper服务器。

Java环境
ZooKeeper使用Java语言编写，因此它的运行环境需要Java环境的支持，可下载1.6或以上版本的Java（建议下载Oracle官方发布的Java，下载地址是：htp:/hnwe.java.con/download).
5.1.2集群与单机
ZooKeeper有两种运行模式：集群模式和单机模式。本节将分别对两种运行模式的安装和配置进行简要讲解，具体的服务器配置将在8.1节中讲解。另外，如果没有特殊说明，本节涉及的部署与配置操作都是针对GNU/Linux系统的。
集群模式
现在，我们开始讲解如何使用三台机器来搭建一个ZooKeeper集群。首先，我们假设已经准备好三台互相联网的Linux机器，它们的IP地址分别为IP、IP，和IP.。

1.准备Java运行环境,确保你已经安装了Java1.6成更高版本的JDKm

2.下载ZooKeeper安装包
下载地址为:http://zookeeperapache.org/neleases.hm注意,用户可以选择稳定版本(stable)进行下载,下载完成后会得到一个文件名类似于ookeeper-txrtarg:的文件,解压到一个目录,例如/opt/zookeeper-3.4,3目录下,同时我们约定,在下文中使用“KHOME%代表该目录,日录结构如图5-1所示

图5-1.Zookeeper目录结构
3.配置文件：00.c。
初次使用ZooKeeper，需要将9%ZK_/HOME6/conf目录下的z00.sample.cg文件重命名为：0o.cg，并且按照如下代码进行简单配置即可：
tickTime=2000
datapir=/var/Lib/zookeeper/
clientPort=2181
initlimit=5
syncLimit=2
server.1=IP1:2888:3888
server.2=IP,:2888:3888
server.3=lP1:2888:3888
关于ZooKeeper的参数配置，将在8.l节中做详细讲解，这里只是简单地说几点。·在集群模式下，集群中的每台机器都需要感知到整个集群是由哪几台机器组
成的，在配置文件中，可以按照这样的格式进行配置，每一行都代表一个机器
配置：
server.id=host:port:port
其中，id被称为ServerID，用来标识该机器在集群中的机器序号。同时，在
每台ZooKceper机器上，我们都需要在数据目录（即dataDir参数指定的那
个目录）下创建一个myid文件，该文件只有一行内容，并且是一个数字，即
对应于每台机器的ServerID数字。
·在ZooKceper的设计中，集群中所有机器上z00.cg文件的内容都应该是一致
的。因此最好使用SVN或是GIT把此文件管理起来，确保每个机器都能共享
到一份相同的配置。
·上面也提到了，myid文件中只有一个数字，即一个SeryerID。例如，server.1
的myid文件内容就是“l”。注意，请确保每个服务器的myid文件中的数字
不同。并且和自己所在机器的:oo.c/g中server.id=host:port:port的
id值一致。另外，id的范围是1~255。
4.创建myid文件。
在dataDir所配置的目录下，创建一个名为mpyid的文件，在该文件的第一行写上一个数字，和：00.cg中当前机器的编号对应上。
5.按照相同的步骤，为其他机器都配置上z00.cfg和myid文件。
6.启动服务器。

至此，所有的选项都已经基本配置完毕，可以使用%ZK_HOME9%/bin目录下的zkServersh脚本进行服务器的启动，如下：
$shzkServer.shstart
JXenabledbydefault
Usingconfig:/opt/zookeeper-3.4.3/bin/../conf/zoo.cfg
Startingzookeeper...STARTED
7.验证服务器。
启动完成后，可以使用如下命令来检查服务器启动是否正常：
$telnet127.0.0.12181
Trying127.0.0.1...
Connectedtolocalhost.Localdomain(127.0.0.1).
Escapecharacteris]".
stat
Zookeeperversion:3.4.3-1240972,builton02/06/201210:48GMT
Clients:
/127.0.0.1:5025710](queued=0,recved=1,sent=e)
Latencymin/avg/max:Q/1/4489
Received:844689
Sent:993100
Qutstanding:e
Zxid:0x600084344
Mode:Leader
Nodecount:37
上面就是通过Telnet方式，使用stat命令进行服务器启动的验证，如果出现和上面类似的输出信息，就说明服务器已经正常启动了。

单机模式
在上文的集群模式中，我们已经完成了一个ZooKeeper集群的搭建了。一般情况下，在开发测试环境，我们没有那么多机器资源，而且平时的开发调试并不需要极好的稳定性。幸运的是，ZooKeeper支持单机部署，只要启动一台ZooKeeper机器，就可以提供正常服务了。
其实，单机模式只是一种特殊的集群模式而已一只有一台机器的集群，认识到这点后，对下文的理解就会轻松不少了。单机模式的部署步骤和集群模式的部署步骤基本一致，只是在：00.cfR文件的配置上有些差异。由于现在我们是单机模式，整个ZooKeeper集群中只有一台机器，所以需要对xo0.cfg做如下修改：
tickTime=2000
dataDir=/var/1ib/zookeeper/clientPort=2181
inittimit=5
syncLimit=2
server.1=IP1:2888:3888

和集群模式唯一的区别就在机器列表上，在单机模式的200.cg文件中，只有server.
这一项。修改完这个文件后，就可以启动服务器了。同样，验证服务器启动情况，然后得到如下的输出信息：
$telnet127.0.8.12181
Trying127.0.0.1...
Connectedto127.0.0.1.
Escapecharacteris"]'.
stat
Zookeeperversion;3.4.3-1240972,builton02/06/201210:48GT
Clients:
/127.0.0.1:44801[e](queued=e,recved=1,sent=0)
Latencymin/avg/max:e/0/0
Reteived:2
Sent:1
Qutstanding:0
Zx1d:0xe
Mode:standalone
Nodecount;4
Connectionclosedbyforeignhost.
细心的读者会发现，集群模式和单机模式下输出的服务器验证信息基本一致，只有Mode属性不一样。在集群模式中，Mode显示的是leader.其实还有可能是follower，对于Leader和Follower角色的概念，在4.1.3节中已经做了详细介绍，它们用来标识当前服务器在集群中的角色。而在单机模式中，Mode显示的是standalone，相信读者也不难理解这个标识，在这里就不再赞述了。
伪集群模式
在上文中，在集群和单机两种模式下，我们基本完成了分别针对生产环境和开发环境ZooKeeper服务的搭建，已经可以满足绝大多数场景了。
现在我们再来看看另外一种情况，如果你手上有且只有一台比较好的机器”，那么这个时候，如果作为单机模式进行部署，资源明显有点浪费；而如果想要按照集群模式来部署的话，那么就需要借助硬件上的虚拟化技术，把一台物理机器转换成几台虚拟机，不过这样操作成本太高。所幸，和其他分布式系统（如Hadoop)一样，ZooKeeper也允许你在一台机器上完成一个伪集群的搭建。
所谓的伪集群，用一句话说就是，集群所有的机器都在一台机器上，但是还是以集群的特性来对外提供服务。这种模式和集群模式非常类似，只是把：00.cg做了如下修改：
tickTime=2000
dataDir=/var/Lib/zookeeper/
clientPort=2181
initLimit=5
syncLimit=2
server,1=1P::2888:3888
server.2=IP::2889:3889
server.3=IP.:2890:3890
在：00.cg配置中，每一行的机器列表配置都是同一个IP地址：IP，但是后面的端口配置都已经不一样了。这其实不难理解，在同一台机器上启动多个进程，就必须绑定不同的端口。关于这几个端口的具体说明，将在8.1节中做详细讲解。
5.1.3运行服务
在5.1.2节中，我们主要讲解了如何搭建各种运行模式的ZooKeeper集群。本节将会重点讲解如何启动与停止ZooKeeper服务，同时也会向读者介绍如何解决在ZooKeeper服务启动阶段出现的一些常见的异常问题。
启动服务
首先我们来看下如何启动ZooKeeper服务。常见的启动方式有两种。
Java命令行
这是Java语言中通常使用的方式。使用Java命令来运行JAR包，具体方法是在
ZooKeeper3.4.3发行版本的%ZK_HOME%目录下执行如下命令：
$java·cpzookeeper·3.4.3.jar:lib/slf4j-api-1.6.1.jar:lib/slf4j-log4j12.
1.6.1.jar:ib/log4j-1.2.15.jar:conforg.apache.zookeeper.server,quorum.
QuorumPeertainconf/zo0.cfg
通过运行上面这个命令，ZooKeeper的主入口QuorumPeerMain类就会启动
ZooKeeper服务器，同时，随着ZooKeeper服务的启动，其内部的JMX也会被启
动，方便管理员在JMX管理控制台上进行一些对ZooKeeper的监控与操作。关干
ZooKeeper的JMX管理，将在8.3节中做详细讲解。

注意，不同的Z00Keeper发行级本，依抽的log4j和s引j级本是不一样的””.
请读者务必看清楚自己的版本后，再执行上面这个命令。
使用ZooKeeper自带的启动脚本来启幼ZwoKeeper
在Zo0Keeper的%ZK_HOAMELbin目录下有几个有用的脚本，如图5-2所示，可以
用这些脚本来启动与停止ZooKeeper服务，这个目录下的所有文件都有两种文件格
式：sh和cmd.分别适用于UNIX系统和Windows系统。

图52.ZooKeeperbin目录下文件列表表5-1中列举了这些脚本文件及其简单说明。注意,表51的“脚本”一列中,并没有包含每个脚本的文件后级(例如,表5-1中注明了cLeanup而不是cLeanup.sh),因为尽管后级不同,但是它们在各自的操作系统上的作用与用法是一致的。表5-1.ZooKeeper可执行脚本cLean停止服务停止ZooKeeper服务最常用的方法就是使用上面介绍的esErver脚本的stop命令来完成,如下执行上面的脚本,就能够停止Zookeeper服务了
elSener
脚本sshzkServer,shstopMXenabledbydefaultUsingconfig:/opt/zookeeper.3.4.3/bin/./cont/zoo.cfgStoppingzookeeper..STOPPED
清理ZKcp历史数,色事日志文件和快照数文件重ZooKeeper的环境量
Zookeeper的一个局易客户keEper务器的启动、停止和重启脚本

常见异常
在启动的时候，通常会碰到一些异常，下面将对这些常见的异常进行讲解。
妨口被占用
在启动ZooKceper的时候，可能出现如下“端口被占用”的异常，导致服务器无法
正常启动：
java.net.BindException:Addressalreadyinuse
atsun.nio.ch,Net,bind(NativeMethod)
atsun.nio.ch.ServerSocketChannetImpl.bind(ServerSocketChannetImpl,java:126)
atsun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:59)
atsun.nio.ch.ServerSocketAdaptor,bind(ServerSocketAdaptor.java:52)
ato.a.z.5,NIOServerCnxnFactory.configure(NToServerCnxnFactory.java:111)
ato.a.2.5.ZooKeeperServerMain.runFromConfig(ZooKeeperServerMain.java:110)
ato.a.2.s.ZooKeeperServerMain.initializeAndRun(ZooKeeperServerMain.java:86)
ato.a,Z.s.ZooKeeperServerMain.main(ZooKeeperServerMain,java:52)
ato.a.z.s.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:116)
at
org.apache.zookeeper.server.quorum.QuorumPeerMain.main(QuorumPeerMain.java:7
java.net.BindException:Addressalreadyinuse这个异常是Java
程序员最然悉的异常之一，导致这个异常的原因通常是因为218l端口已经被其他
进程占用了。通常的做法就是检查当前机器上哪个进程正在占用这个端口，确认其
端口占用的必要性，将该进程停止后，再一次启动ZooKeeper即可。也可以编
辑%ZK_HOME/con/zoo.cg文件，更换ZooKeeper的clientPort配置，例如，
可以将其设置为2080：
databir=/var/Lib/zookeeper/
clientPort=2080
initlimit=5
磁盘没有剩余空间
无论是在ZooKceper启动还是正常运行过程中，都有可能出现如下“磁盘没有剩余空间”的异常，一具遇到这个异常，ZooKeeper会立即执行Failover策略，从而退出进程：
java.io.IOException:Nospaceleftondevice
atjava.io.FileOutputStream.writeBytes(NativeMethod)
atjava.io.Fileoutputstream.write(File0utputStream.java:260)
atjava.1o.BufferedOutputStream.flushBuffer(BufferedoutputStream.java:65)
atjava.io.BufferedOutputStream,flush(BufferedoutputStream.java:123)
org.apache.zookeeper.server.persistence.FileTxnLog.commit(FileTxnLog.java:3e
9）
ato.a.z.s.persistence.FileTxnSnapl.og.commit(FileTxnSnapLog.java:3e6)
ato.a.z.5.ZKDatabase.commit(ZKDatabase,java:484)
ato.a.z.s.SyncRequestProcessor.flush(SyncRequestProcessor.java:162)
ato.a.z.s.SyncRequestProcessor.run(SyncRequestProcessor.java:101)
遇到这个问题，通常的做法就是清理磁盘。当然，为了避免以后再次遇到此类磁盘
空间满的问题，需要加上对ZooKeeper机器的磁盘使用量监控和ZooKecper日志的
自动清理。关于ZooKceper日志清理，将在8.6.1节中做详细讲解。
无法找到myid文件
在5.1.2节讲解如何部署一个ZooKeeper集群的基本步骤时，我们在步骤4中提到，
需要在数据目录下创建一个myid文件。这里说的“无法找到myid文件”就是因为
没有找到这个配置文件而导致的如下异常：
ERROR[main:QuorumPeerMaing85]-Invalidconfig,exitingabnormally
0.a.z.5.quorum.QuorumPeerConfigsConfigException:Errorprocessing/home/
httpproxy/yinshi.nc/zookeeper-3.4.3/bin/.…/conf/zoo.cfg
ato.a.z.5.quorum.QuorumPeerConfig.parse(QuorumPeerConfig.java:121)
ato.a.z.s.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:101)
ato.a,Z.5.quorum.QuorumPeerMain.main(QuorumPeerMain.java:78)
Causedby:java.lang.IllegalArgumentException:/tmp/zookeeper/myidfileis
missing
ato.a.z,5,quorum,QuorumPeerConf1g,parseProperties(QuorumPeerConfig.java:344)
ato.a.z.5.quorum.QuorumPeerConfig,parse(QuorumPeerConfig.java:117)
.2more
对于这个问题，只需在数据目录下创建好一个mvid文件即可。
集群中其他机器Leader选举端口未开
在集群模式部署下服务器逐台启动的过程中，会碰到类似于下面这样的异常：
WARN[QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:2181:QuorumCnxlanagere368]
·Cannotopenchannelto2atelectionaddress/122.228.242.241:3888
java.net.SocketTimeoutException:connecttimedout
atjava.net.PlainSocketImpl.socketConnect(NativeMethod)
atjava.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:351)
atjava.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:213)
atjava.net.PlainSocketImpl.connect(PlainSocketImpl.java:200)
atjava.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
atjava.net.Socket.connect(Socket.java:529)

ato.a.z.s.quorum.QuorumCnxManagerconnecton(QuorumCnxManagerjava:354)atoazsquorum.FastLeaderElectionLookForLeader(FastLeaderElectionjava:755atoazsquorum.QuorumPeerrun(QuorumPeerjava:716)INFo[QuorumPeer(11/0:0:0:0:0:0:0:0:2181:FastLeaderElection@764]Notificationtimeout:406

这是由于在启动过程中,虽然当前机器启动了,但其他机器还没有启动完成,因此无法和其他机器在相应端口上进行连接。对于这个问题,只要快速启动集群中的其他机器即可。另外,上面的异常中标明了是3888这个端口无法创建连接,这是因为ZooKeeper獸认使用3888端口进行Leader选举过程中的投票通信,关于Zookeeper的Leader选举,将在7.6节中做详细讲解

sshzkCLishwatchedEventstate:SyncConnectedtype:Nonepath:null[zk:locaLhost:2181(CONNECTED)01sshzkclish-serverip:portcreate[-sl[-elpathdataacl
to.a.z.s.quorum.QuorumCnxManagerconnectAll(QuorumCnxManagerfava:388)

52客户端脚本
现在,你已经搭建起了一个能够正常运行的ZooKeeper集群了,接下来,我们开始来学习如何使用客户端对Z0Keeper进行操作,在表5-1中,我们已经列出了ZooKeeper自带的一些命令行工具,在本节,我们重点要看下zkC这个脚本。进入ZooKeeper的bin目录之后,直接执行如下命令:当看到如下输出信息时,表示已经成功连接上本地的ZooKeeper服务器了注意,上面的命令没有显式地指定ZooKeeper服务器地址,那么默认是连接本地的ZooKeeper服务器。如果希望连接指定的ZooKeeper服务器,可以通过如下方式实现
52.1创建
使用create命令,可以创建一个ZooKeeper节点,用法如下:其中,·5或·e分别指定节点特性:顺序或临时节点。默认情况下,即不添加·s或e参数的,创建的是持久节点。执行如下命令:
[zk:tocalhost:2181(CONNECTED)0]create/zk-book123Created/zk-book
执行完上面的命令,就在ZooKeeper的根节点下创建了一个叫作kbook的节点,并且节点的数据内容是“123另外,create命令的最后一个参数是acl,它是用来进行权限控制的,缺省情况下,不做任何权限控制。关于ZooKeeper的权限控制,将在7.1.5节中做详细讲解

5.2.2读取
与读取相关的命令包括ls命令和set命令。
1s
使用ls命令，可以列出ZooKeeper指定节点下的所有子节点。当然，这个命令只能看到指定节点下第一级的所有子节点。用法如下：
1spath[watch]
其中，path表示的是指定数据节点的节点路径。
执行如下命令：
[zk:Localhost:2181(CONNECTED)e]Ls/
[zookeeper]
第一次部署的ZooKeeper集群，默认在根节点“/”下面有一个叫作cookeeper的保留节点。
get
使用get命令，可以获取ZooKeeper指定节点的数据内容和属性信息。用法如下：
getpath[watch]
执行如下命令：
[zk:localhost:2181(CONNECTED)e)get/zk-book
123
cZxid=exa
ctime=ThuJun2010:35:00UTC2013
mZxid=0xa
mtime=ThuJun2010:35:00UTC2013
pZxid=exa
cversion=0
dataversion=0
aclVersion=0
ephemeralOwner=9x0
datalength=3
numChildren=0
从上面的输出信息中，我们可以看到，第一行是节点/k-book的数据内容，其他几行则是创建该节点的事务ID（cZxid).最后一次更新该节点的事务ID（mZxid)和最后一次更新该节点的时间（mtime)等属性信息。关于ZooKecper节点的数据结构，将在7.1.2节中做详细讲解。
5.2.3更新
使用set命令，可以更新指定节点的数据内容。用法如下：
setpathdata[version]
其中，data就是要更新的新内容。注意，set命令后面还有一个version参数，在ZooKceper中，节点的数据是有版本概念的，这个参数用于指定本次更新操作是基于ZNode的哪一个数据版本进行的。
执行如下命令：
tzk；localhost:2181(COMVECTED)3]set/zk-book456
cZxid=8xa
ctime=ThuJun2810:35:00UTC2013
曲Zxid=0x11
mtime=FriJun21e1:05:49UTC2013
pZxid=8xa
cversion=日
dataversion=1
aclVersion=0
ephemeralOwner=0x8
datatength=3
numChildren=0
执行完以上命令后，节点/ck-book的数据内容就已经被更新成“456”了。细心的读者还会发现，在输出信息中，dataVersion的值由原来的0变成了1，这是因为刚才的更新操作导致该节点的数据版本也发生了变更。关于ZNode的数据版本，将在7.l.3节中做详细讲解，这里只是演示简单操作，不再详细展开。

5.2.4删除
使用delete命令，可以删除ZooKeepr上的指定节点。用法如下：
deletepath[version]
此命令中的version参数和set命令中的version参数的作用是一致的。
执行如下命令：
tzk:localhost:2181(CONNECTED)21delete/zk-book
执行完以上命令后，就可以把/ak-book这个节点成功删除了。但是这里要往意的一点是，要想删除某一个指定节点，该节点必须没有子节点存在。这可以通过执行如下命令来进行验证：
【zk：localhost:2181(CONECTED)71create/zk-book123
Created/2k-book
Izk:localhost:2181(CONNECTED)8]create/zk-book/child12345
Created/zk-book/child
[zk:localhost:2181(COWNECTED)9]detete/zk-book
Nodenotempty:/zk-book
上面的这个输出结果已经很清晰地表明了删除失败，通过Nodenotempty这个出错信息，可以看出无法删除一个包含子节点的节点。
5.3Java客户端API使用
ZooKeeper作为一个分布式服务框架，主要用来解决分布式数据一致性问题，它提供了简单的分布式原语，并且对多种编程语言提供了API。下面我们重点来看下ZooKecper的Java客户端API使用方式。在看本节内容之前，请读者先在博文视点网站（huyp:/www.broadview.com.cn)的“下载专区”下载本书的源代码：ZooKeeper，本节的所有样例代码都在book.chapter05包中。
5.3.1创建会话
客户端可以通过创建一个ZooKeeper(org.apache.zookeeper.ZooKeeper)实例来连接ZooKeeper服务器。ZooKeeper的4种构造方法如下。
清单5-1.ZooKeeper构谁方法
ZooKeeper(StringconnectString,intsesslonTimeout,watcherwatcher);
ZooKeeper(StringconnectString,intsessionTimeout,watcherwatcher,boolean
canBeReadOnly):
ZooKeeper(Stringconnectstring,intsessionTimeout,Watcherwatcher,1ongsessiontd.
byte[]sessionPasswd)；
ZooKeeper(Stringconnectstring,intsessionTimeout,Watcherwatcher,Longsessionld,
byte[]sessionPasswd,booleancanBeReadonty)；
使用任意一个构造方法都可以顺利完成与ZooKeeper服务器的会话（Session)创建，表5-2中列出了对每个参数的说明。
表5-2.ZooKeeper构造方法参数说明
i指ZooKecper服务器列表，由类文状态退号分开的host；port手科事组底，
每一个都代表一台ZooKceper机器，例加，192.168.1.1:2181，
|192.168.1.2:2181，192,168.1.3:2181.这样就为客户端指定了三台服
务器地扯，方外，也可以在connectString中设置客户端选接上ZooKeeper
后的根目录，方法是在host:port字符事之后添加上这个抓日录，例加，192.
connectstring|168.1.1:2181,192.168.1.2:2181,192.168.1.3:2181/zk-
book.这样我描定了该客户城连接上ZooKceper服务器之后，所有对ZooKceper
的操作，都会基于这个根目录，例知，客户编对oa/bur的操作，都会指向节点
zk-bookfow/nar这个日录也叫Chroot，即客户端隔离命名空间，美于
ZooKeeper中Chroot的用法和作用，特在7.3.2节中做详细讲解
指会话的超时时间，是一个以毫秒为单做的处塑值。在Z0oKceper中有
会话的概念，在一个会话周期内，ZooKeeper客户端和服务器之间会通过心脆检sessionTimeout|测机制未旅持会话的有效性，一旦在sessionTimeout时间内没有进行有效
的心靶检制，会话就会夫效。关于ZooKeeper的会话和心藏检测，将在74节中
做许细讲解
在4.13节中我们已经程药了ZooKeeper中Watcher的概念。ZooKceper充评
客户端在构遗方法中待入一个接口Watcher(org.apache.zookeeper.
watcher|watcher)的实现类对象来作为观认的Watcher事件通知处理器。当然，该乐
数可以说置为null以表明不需要设五现认的Watcher处理器。关于ZooKeeper
的Watcher机制和实现原理。精在7.14节中做详细讲解
这是一个boolean类型的参载，用于标识当前会话是香种“read-only(天
读）”模式，默认情况下，在ZmoKeeper集群中，一个机器扣果和集群中过丰及canleReadon1y以上机器夹去了网结速接，部么这个机器特不再处理客户站请求（包格读写请
|求）。做是在果些使用场景下，当ZooKccpe献务器发生此类献障的时候、我们
还是希望ZooKeeper服务器能够提供读航务（当然写服务肯定无法提馈）
这就是ZooKceper的“read-only”模式，
分别代表会话ID和会话秘钥。这两个养数能奶唯一确定一个会话，同时客户
这使期这两个系教可以实现客户站会话复用，从高达到读复会话的效果，具体
|使用方法是，第一次连接上ZooKeeper服务器时，通过调用ZooKeeper对章实sessionId和ses|例的以下两个接口，即可获得当前会话的ID和秘钥：
sionPasswd|longgetSessionId()；
byte[]getSessionPasswd()；
获取到这两个奉教值之后，就可以在下次创建ZooKeeper对象疾例的时候待
入构进方法了
注意，ZooKeeper客户端和服务端会话的建立是一个异步的过程，也就是说在程序中，构造方法会在处理完客户端初始化工作后立即返回，在大多数情况下，此时并没有真正建立好一个可用的会话，在会话的生命周期中处于“CONNECTING”的状态。
当该会话真正创建完毕后，ZooKeeper服务端会向会话对应的客户端发送一个事件通知，以告知客户端，客户端只有在获取这个通知之后，才算真正建立了会话。
该构造方法内部实现了与ZooKeeper服务器之间的TCP连接创建，负责维护客户端会话的生命周期，本章不对这些细节做更多讲解，关于ZooKeeper客户端与服务端之间的连接创建过程及其内部原理，将在7.3节中做详细讲解。
创建一个最基本的ZooKeeper会话实例
清单5-2.剑建一个最基本的ZooKceper会话实侧
packagebook.chaptere5.$5_3.1;
importjava.utit.concurrent.CountDowntatch;
importorg.apache.zookeeper.WatchedEvent;
importorg.apache.zookeeper.Matcher;
importorg.apache.zookeeper.watcher.Event.KeeperState;
importorg.apache.zookeeper.ZooKeeper;
//Chapter:5.3.1JavaAPl>创建连接>创建一个最基本的ZooKeeper会话实例
publicclassZooKeeper_Constructor_Usage_Simpleimplementswatcher{
privatestaticCountDownLatchconnectedSemaphore=newCountDownLatch(1)；
publicstaticvoidmain(String[largs)throwsException{
ZooKeeperzookeeper=
newZooKeeper("domain1.book.zookeeper4:2181",
5000，//
newZooKeeper_Constructor_Usage_Simple()):
System.out.println(zookeeper.getState())；
try{
connectedSemaphore.await();
}catch(InterruptedExceptione){}
System,out.println("ZooKeepersessionestablished.")；
publicvoidprocess(watchedEventevent)(
System.out.printin("Receivewatchedevent:"+event);
if(KeeperState.SyncConnected==event.getState()){
connectedSemaphore.countDown()；
运行程序，输出结果如下：
CONNECTING
Receivewatchedevent:WatchedEventstate:SyncConnectedtype:Monepath:nult
ZooKeepersessionestablished.
在上面这个程序片段中，我们使用第一种构造方法（ZooKeeper(String
connectstring,intsessionTimeout,Watcherwatcher))来实例化
了一个ZooKeeper对象，从而建立了会话。
另外，ZooKeeper_Constructor_Usage类实现了Watcher接口，重写了
process方法，该方法负责处理来自ZooKeeper服务端的Watcher通知，在收到
服务端发来的SyncConnected事件之后，解除主程序在CountDownLatch上的
等待阻塞。至此，客户端会话创建完毕。
创建一个复用sessionId和sessionPasswd的ZooKceper对象实例
在清单5.l中列出的ZooKeeper客户端构造方法中，我们看到ZooKeeper构造方法
允许传入sessionId和sessionPasswd——客户端传入sessionId和
sessionPasswd的目的是为了复用会话，以维持之前会话的有效性。清单5-3是
一个复用sessionId和sessionPasswd来创建ZooKeeper对象实例的示例。清单5.3、数用sessionId和sessionPasswd来创建一个Zookeeper对象实例
packagebook.chaptere5.55_3.1；
importjava.util.concurrent.CountDounLatch；
importorg.apache,zookeeper.WatchedEvent;
importorg.apache.zookeeper.Watcher;
importorg.apache.zookeeper.Watcher.Event.Keeperstate；
importorg.apache.zookeeper.ZooKeeper;
/∥创建一个最格本的ZooKeeper对象实例，复用sessionId和sessionpasswd
publicclassZooKeeper_ConstructorUsageWith_S0PASSwDimplementsWatcher{
privatestaticCountDownLatchconnectedSemaphore=newCountDownLatch(1);
pubticstaticvoidmain(String[]args)throwsException(
Zookeeperzookeeper=newZookeeper("domain1.book.zookeeper:2181".
5800，//
newZooKeeper_Constructor_UsageWith_STD_PASSWD());
connectedSemaphore.await()；
longsessionId=zookeeper,getSessiontd();
bytel]passwd=zookeeper.getSessionPasswd()；
//UseillegatsessionldandsessionPassd
zookeepersnewZooKeeper("domein1.book.zookeeper:2181",
5800,//
newZookeeper_Constructor_Usage_With_S10_PASSwD().//
11,//
“test".getBytes())；
//UsecorrectsessionIdandsessionPasswld
zookeeper=newZooKeeper("domain1.book.zookeeper:2181"
5000,//
newZooKeeper_Constructor_Usage_with_SID_PASSMD(),//
sessionld,//
passwd)；
Thread.sleep(Integer,MAX_VALUE)；
publicvoidprocess(watchedEventevent){
System.out.printin("Receivewatchedevent:"+event)；
if(KeeperState.SyncConnecteds=event.getState()){
connectedSemaphore.countbown()；
运行程序，输出结果如下：
Receivewatchedevent:MatchedEventstate:SyncConnectedtype:Nonepath:null
Receivewatchedevent:WatchedEventstate:Expiredtype:Nonepath:null
Receivewatchedevent:WatchedEventstate:SyncConnectedtype:Nonepath:null
从上面这个示例程序和结果输出中，我们可以看出，第一次使用了错误的
sessionId和sessionPasswd来创建ZooKeeper客户端的实例，结果客户端接
收到了服务端的Expired事件通知：而第二次则使用正确的sessionId和
sessionPasswd来创建客户端的实例，结果连接成功。
5.3.2创建节点
客户端可以通过ZooKeeper的APl来创建一个数据节点，有如下两个接口：
Stringcreate(finalStringpath,
bytedata[].
ListeACL>acl,
Createlodecreatelode)
voidcreate(finalStringpath,
bytedata[l.
ListeACL>acl,
CreatelodecreateMode,
Stringcallbackcb,Objectctx)
这两个接口分别以同步和异步方式创建节点，APl方法的参数说明如表5-3所示。

表5-3.ZooKeepercreateAPl方法参数说明
参数名说明
path需要创建的批据节点的节点路径，例扣,/zh-bookfoo
data[】一个宇节数加，是节点创建后的初抽内容
acl节点的ACL发味
节点秦型，是一个秋举类型，通常有4种可选的节点类型：
·持久(PERSISTENT)
·持久顺序(PERSISTENTSEOUENTIAL)
createMode·格时(EPHEMERAL)
·临时顺序(EPHEMERAL_SEQUENTIAL)
关于ZNode的节点特性，将在7.1.2节中微详细讲解
注册一个异步回调函我，开发人员需要实现StringCallback根口，主要是对下
而这个方法的重写
cbvoidprocessResult(intrc,Stringpath,Objectctx,String
name):
当服务端节点创建完毕后，ZooKeeper客户端就会自动调用这个方法，这样就
可以处理相美的业务逻辑了
用于传理一个对象，可以在回词方法执行的时候使用，通常是就一个上下文Ctx(Context)信息
需要注意几点，无论是同步还是异步接口，ZooKeeper都不支持递归创建，即无法在父节点不存在的情况下创建一个子节点。另外，如果一个节点已经存在了，那么创建同名节点的时候，会抛出NodeExistsException异常。
目前，ZooKeeper的节点内容只支持字节数组（byte[1)类型，也就是说.ZooKeeper不负责为节点内容进行序列化。开发人员需要自己使用序列化工具将节点内容进行序列化和反序列化。对于字符串，可以简单地使用“string".getBytes（)来生成一个字节数组，对于其他复杂对象，可以使用Hessian或是Kryo等专门的序列化工具来进行序列化。
关于权限控制，如果你的应用场景没有太高的权限要求，那么可以不关注这个参数，只需要在ac1参数中传入参数Ids.OPEN_ACL_UNSAFE,这就表明之后对这个节点的任何操作都不受权限控制。关于ZooKeeper的权限控制，将在7.1.5节中做详细讲解。
使用同步API创建一个节点
清单5-4.使用同步API创建一个节点
packagebook.chaptere5.$5_3_2；
importjava.utit.concurrent.CountDownLatch;
importorg.apache.zookeeper.Createlode;
importorg,apache.zookeeper.MatchedEvent；
importorg.apache,zookeeper.watcher;
importorg.apache.zookeeper.Watcher.Event.KeeperState;
importorg.apache.zookeeper.ZooDefs.Ids；
importorg.apache.zookeeper.ZooKeeper;
//ZookeeperAPI创建节点，使用同步（sync)接口
publicclassZookeeper_Create_API_Sync_UsageimplementsWatcher{
privatestaticCountDownLatchconnectedsemaphore=newCountooumtatch(1):
publicstaticvoidmain(String[largs)throwsException(
ZooKeeperzookeeper=newZooKeeper(“domain1.book.zookeeper:2181*,
5000,//
newZooKeeper_CreateAPI_Sync_Usage())；
connectedSemaphore,await()；
stringpathl=zookeeper.create("/zk-test-ephemeral-",
““.getBytes(），
Ids,OPENACL_UNSAFE，
CreateMode.EPHEMERAL)；
System.out.printin("Successcreateznode:"+path1)；
Stringpath2=zookeeper.create("/zk-test-ephemeral.
““.getBytes(）.
Ids.OPENACLUNSAFE,
CreateMode.EPHEMERAL_SEQUENTIAL)；
System.out.println("Successcreateznode；"+path2)；
publicvoidprocess(WatchedEventevent){
if(KeeperState.SyncConnecteda=event.getstate()){
connectedSemaphore.countDown()；
运行程序，输出结果如下：
Receivewatchedevent:WatchedEventstate:SyncConnectedtype:Nonepath:nul1
Successcreateznode:/zk-test-ephemerat-
Successcreateznode;/zk-test-ephemeral-e001975508
在上面这个程序片段中，使用了同步的节点创建接口：Stringcreate（final
Stringpath,bytedata[],List<ACL>acl,CreateModecreateMode).
在接口使用中.我们分别创建了两种类型的节点：临时节点和临时顺序节点。从返
回的结果可以看出，如果创建了临时节点，那么API的返回值就是当时传入的path
参数，如果创建了临时顺序节点，那么ZooKeeper会自动在节点后缀加上一个数字，
并且在APl接口的返回值中返回该数据节点的一个完整的节点路径。
使用异步API创建一个节点
清单5.5.使用异步API创建一个节点
packagebook.chaptere5.55_32；
import.java.util.concurrent.CountDownLatch;
importorg.apache.zookeeper.Asynccallback;
importorg.apache.zookeeper.CreateMode;
importorg.apache.zookeeper,watchedEvent;
importorg.apache.zookeeper.Watcher;
importorg.apache.zookeeper.watcher,Event.Keeperstate;
importorg.apache.zookeeper.ZooDets.Ids;
importorg.apache.zookeeper.ZooKeeper;
NZooKeeperAPI创建节点，使用异抄{async)接口
publicctassZooKeeper_Create_ApI_ASync_Usageimplementswatcher{
privatestaticCountDownLatchconnectedsemaphore=newCountbownLatch(1);
publicstaticvoidmain(String[]args)throwsException{
ZooKeeperzookeeper=newZooKeeper("domain1,book.zookeeper:2181"，
5000，//
newZooKeeper_Create_API_ASync_Usage());
connectedSemaphore.await();
zookeeper.create("/zk-test-ephemeral.","".getBytes(),
Ids.OPENACLUNSAFE,Createlode.EPHENERAL,
newIStringcallback(),"Iamcontext.");
zookeeper.create("/zk-test-ephemeral.","",getlytes().
Ids.OPENACLUNSAFE.CreateMode.EPHEMERAL,
newIStringCaltback()."Iamcontext.")；
zo0keeper.create("/zk-test-ephemeral.","".getBytes(),
Ids.OPEN_ACL_UNSAFE,Createlode,EPHEMERAL_SEOUENTIAL,
newIStringCatlback()."Iamcontext."):
Thread.sLeep(Integer.MAX_VALUE)；
}
publicvoidprocess(MatchedEventevent){
if(KeeperState.SyncConnected==event.getstate()){
connectedSemaphore.countDown()；
}
classIStringCallbackimplementsAsyncCallback.StringCallback{
publicvoidprocessResult(intrc,Stringpath,Objectctx,Stringname){
System.out.println("Createpathresult:[“+rc+","+path+","
+ctx+”,realpathname:"+name)；

运行程序，输出结果如下：
CCreatepathresutt:[e,/zk-test-ephemeral-,Iamcontext.,realpathname:
/zk-test-ephemeral-
Createpathresult:[-110,/zk-test-ephemeral-,Iamcontext.,realpathname:
nult
Createpathresult:[e,/zk,test-ephemeral.,Iamcontext.,realpathname:
/zk-test-ephemeral-0001975736
从这个程序片段中可以看出，使用异步方式创建接口也很简单。用户仅仅需要实现
AsyncCallback.StringCallback()接口即可。AsyncCallback包含了
StatCallback.Datacallback、ACLCallback.ChildrenCallback、
Children2Callback.StringCallback和VoidCallback七种不同的回调
接口，用户可以在不同的异步接口中实现不同的接口。
和同步接口方法最大的区别在于，节点的创建过程《包括网络通信和服务端的节点
创建过程）是异步的。并且，在同步接口调用过程中，我们需要关注接口抛出异常
的可能；但是在异步接口中，接口本身是不会抛出异常的，所有的异常都会在回调
函数中通过ResultCode(响应码)来体现。
下面来重点看下回调方法：voidprocessResult(intrc,stringpath,
objectctx，Stringname)。这个方法的几个参数主要如表5-4所示。
表5-4.ProcessResult方法参数说明
参效名
ResultCode.服务场响应码，客户第可以从这个响应码中识别出APl调用的结采，
|常见的响应码扣下。
re|.o（ok）：接口调用成动。
-4（ConnectionLoss):客户站和服务端连接已断开，
·-110（NodeExists）：指定节点已存在。
·-112（SessionExpired)：会话已过期
path接口调用时待入API的载据节点的节点路径参数值
Ctx提口调用时传入API的Ctx参载值
实际在服务满创建的节名，在清举5-5中，第三次创建节点时，由于创建的节成name|类坐是幅序节点，国此在服务篇没有真正创建好题序节点之，容户端无法知道节点
的完整节点路径，于是，在即调方法中，服务或会通回这个数据节点的变整节点路径

5.3.3删除节点
客户端可以通过ZooKeeper的APl来删除一个节点，有如下两个接口：
publicvoiddelete(finalStringpath,intversion)
publicvoiddelete(finalStringpath,intversion,VoidCatlbackcb,objectctx)
这里列出的两个APl分别是同步和异步的删除接口，APl方法的参散说明如表5-5所示。表5-5.ZooKeeperdeleteAPI方法参数说明
参数名说明
path|指定我据节点的节点，路径，即API课用的国的是易路该节点
version|看定节点的载据版本，即我明本次删除据作是什对该数据版本班行的
选动一个异步附调品饮
ctx用于待递上下文信息的对象
删除节点的接口和53.5节中讲解的更新数据的接口，在使用方法上是极其相似的，所以这里不再对示例代码做详细讲解，读者可以到book.chapter05.S5_33包下查看示例文件Delete_APl_Sonc_Usagejava.唯一需要指出的一点是，在ZooKceper中，只允许删除叶子节点。也就是说，如果一个节点存在至少一个子节点的话，那么该节点将无法被直接删除，必须先删除掉其所有子节点。
5.3.4读取数据
读取数据，包括子节点列表的获取和节点数据的获取.ZooKeeper分别提供了不同的API来获取数据。
getChildren
客户端可以通过ZooKeeper的API来获取一个节点的所有子节点，有如下8个接口可供使用：
List<stringsgetChildren(finalStringpath,Watcherwatcher)
List<stringsgetChildren(Stringpath,booleanwatch)
voidgetChildren(finalStringpath,Watcherwatcher,Chitdrencaltbackcb,Object
ctx)
voidgetChildren(Stringpath,booleanwatch,Childrencallbackcb,Objectctx)
List<string>getChildren(finalStringpath,Watcherwatcher,Statstat)
Listestring>getChildren(Stringpath,booleanwatch,Statstat)
voidgetChildren(finatStringpath,watcherwatcher,Children2Callbackcb,Object
ctx）
voidgetChitdren(Stringpath,booleanwatch,Children2Callbackcb,Objectctx)
这里列出的8个APl包含了同步和异步的接口，APl方法的参数说明如表5-6所示。表5-6.ZooKeepergetChildrenAPI方法参数说明
说明
path和定载据节，点，的节点路径，即API调用的目的是获取该节点的子节点列表
注册的Watcher，一只在本次子节点获取之后，子节点列表发先变史的话，那么watcher就会的签户远发远通加，这参我化许价人ml

参数名说明
人明是否写要注册一个Watcher.另外，在5.3.1节中，我们曾提到过有一个项
认Watcher的概念，这里就要使用到该戏认Watcher了，如果这个参敬是true.那watch会ZooKeeper客户端会自动使用上文中提到的那个发认Watcher:如果是false.表
明不需要注册Watcher
cb注甜一个并步博调南量
ctx用于件递上下文信息的封象
指定低据节点的节点我态信息，用头是在接口中件人一个旧的stat变量，诚statstat变量会么方法执行过框中，就未自越身越响应的新Stat对象普换
可以发现，核API和5.3.2节中的createAPl有很多相似之处，这里我们只对一些有差异的地方展开进行讲解。
首先，我们来看看注册Watcher。如果ZooKeeper客户端在获取到指定节点的子节点列表后，还需要订阅这个子节点列表的变化通知，那么就可以通过注册一个Watcher来实现。当有子节点被添加或是删除时，服务端就会向客户端发送一个NodeChildrenChanged(EventType.NodeChildrenChanged)类型的事件通知，需要注意的是，在服务端发送给客户端的事件通知中，是不包含最新的节点列表的，客户端必须主动重新进行获取。通常客户端在收到这个事件通知后，就可以再次获取最新的子节点列表了。再来看看用于描述节点状态信息的对象：stat.stat对象中记录了一个节点的基本属性信息，例如节点创建时的事务ID（cZxid)，最后一次修改的事务ID（mZxid)和节点数据内容的长度（datalength)等。有时候，我们不仅需要获取节点最新的子节点列表，还要获取这个节点最新的节点状态信息。对于这种情况，我们可以将一个旧的stat变量传入API接口，该stat变量会在方法执行过程中，被来自服务端响应的新stat对象替换。
使用同步API获取子节点列表
清单5-6.使用同步AP/谈取子节点判表
packagebook.chaptere5.$5_3_4；
importjava.util.List;
importjava.util.concurrent.CountDownLatch;
importorg.apache.zookeeper.CreateMode;
importorg.apache.zookeeper.WatchedEvent;
importorg.apache.zookeeper,Watcher:
importorg.apache.zookeeper.watcher.Event.EventType;
importorg.apache.zookeeper.Matcher.Event.KeeperState;
importorg.apache.zookeeper.ZooDefs.Ids;
importorg.apache.zookeeper.ZooKeeper;
IZookeeperAPl获取子节点列表。使用问步（sync)接口
publicclassZookeeper_GetChildren_API_Sync_UsageimplementsWatcher{
privatestaticCountDownLatchconnectedSemaphore=newCountDownLatch(1):
privatestaticZookeeperzk=nult;
publicstaticvoidmain(String[]args)throwsException{
5tringpath=“/zk-book"；
zk=newZooKeeper("domain1.book.zookeeper:2181",
5000,//
nevZookeeper_GetChildren_API_Sync_Usage()):
connectedSemaphore.await():
zk.create(path,"".getBytes(),
Ids.OPENACLUNSAFE,CreateMode.PERSISTENT)；
zk.create(path+"/c1","".get8ytes(),
Ids.OPEN_ACL_UNSAFE,Createlode.EPHEMERAL):
Listestringschitdrenlist=zk.getChildren(path,true);
system.out.println(childrenList):
zk.create(path+"/c2","".getBytes(),
Ids.OPEN_ACL_UNSAFE.CreateMode.EPHEMERAL):
Thread.steep(Integer.MAX_VALUE)；
pubticvoidprocess(WatchedEventevent){
if(KeeperState.SyncConnected==event.getstate()){
if(EventType.Nonesaevent.getType()6&nult==event.getPath()){
connectedSemaphore.countDown()；
}elseif(event.getType()==EventType.NodeChildrenchanged){
try{
System.out.printin("ReGet
Child:"+zk.getChildren(event.getPath(),true));
}catch(Exceptione){}
运行程序，输出结果如下：
[e1]
Re6etChild:[c1,c2]
在上面这个程序中，我们首先创建了一个父节点/ck-book，以及一个子节点ik-book/cl.然后调用getChildren的同步接口来获取/ck-book节点下的所有子节点，同时在接口调用的时候注册了一个Watcher.之后，我们继续向/ck-book节点创建子节点/ck-book/e2.由于之前我们对ck-book节点注册了一个Watcher，因此，
一旦此时有子节点被创建.ZooKeeper服务端就会向客户端发出一个“子节点变更”
的事件通知，于是，客户端在收到这个事件通知之后就可以再次调用getChildren
方法来获取新的子节点列表。
另外，从输出结果中我们还可以发现，调用getChildren获取到的节点列表，都
是数据节点的相对节点路径，例如上面输出结果中的c1和c2，事实上，完整的ZNode
路径应该是/-baokcl和ek-book/e2.
关于Watcher，这里简单提一点，ZooKeeper服务端在向客户端发送Watcher
“NodeChildrenChanged”事件通知的时候，仅仅只会发出一个通知，而不会把
节点的变化情况发送给客户端，需要客户端自己重新获取。另外，由于Watcher通
知是一次性的，即一旦触发一次通知后，该Watcher就失效了，因此客户端需要反
复注册Watcher.
使用异步API被取子节点列表
清单5-7.使用并步API获取子节点列表
packagebook.chaptere5.$534；
importjava.util.List;
importjava.util.concurrent.CountDownLatch;
importorg.apache.zookeeper.AsyncCallback;
importorg.apache.zookeeper.Createlode；
importorg.apache.zookeeper.MatchedEvent:
importorg.apache.zookeeper.watcher;
importorg.apache.zookeeper.watcher.Event.EventType;
importorg.apache,zookeeper.watcher.Event.Keeperstate;
importorg.apache.zookeeper.ZooDefs.Ids;
importorg.apache.zookeeper.ZooKeeper;
importorg,apache.zookeeper,data.Stat;
//ZooKeeperAPl花取子节点弹表，使用异步（async接口
publicclassZooKeeper_GetChildren_API_ASync_UsageimplementsMatcher{
privatestaticCountDownLatchconnectedSemaphore=newCountDownLatch(1)；
privatestaticZooKeeperzk=null;
publicstaticvoidmain(String[]args)throwsException{
Stringpath="/zk-book";
zk=newZookeeper("domain1.book.zookeeper:2181"
5000，//
newZooKeeper_GetChildren_API_ASync_Usage());
connectedSemaphore.await()；
2k.create(path,"".getBytes(),
Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT)；

Child:"+zk,getChildren(eventgetPath(),true))classIChildren2CallbackimplementsAsyncCallback,Children2Callback{children,Statstat)"parampath:"pathstat):运行程序,输出结果如下:在上面这个程序中,我们将子节点列表的获取逻辑进行了异步化异步接口通常会应用在这样的使用场景中:应用启动的时候,会获取一些配置信息,例如“机器列表”,这些配置通常比较大,并且不希望配置的获取影响应用的主流程
publicvoidprocess(WatchedEventevent){publicvoidprocessResult(intrc,Stringpath,Objectctx,List<String>GetChildrenznoderesult:[responsecode:0,parampath:/zk-book,ctx:null,childrenlist:[cstat:249173686311,249173686311,14022327834611402232783461,0,1,0.0,01,249173686315ReGetChild:[c1,c2]
zk.getChildren(path,true,newIChildren2Call(),null);zk.create(path+"/c2",getBytes().Thread.sleep(Integer.MAXVALUEif(Keeperstate.SyncConnectedevent.getstate()){
zk.create(path+"/c1","".getBytes().System.out.println("GetChildrenznoderesult:[responsecode:"++
if(EventType.Noneevent.getType()&nullevent.getPath())elseif(event.getType()=EventTypeNodeChildrenChanged){
Ids.OPENACLUNSAFE,CreateMode.EPHEMERAL)Ids.OPENACLUNSAFE,CreateMode.EPHEMERAL):
connectedSemaphore.countDown)trycatch(Exceptione)+"ctx:"ctx+",childrentist:"children+"stat:"
System.out.println("ReGet

getData  客户端可以通过 ZooKeeper的AP来获取一个节点的数据内容,有如下4个接口:
